using System;
using CoreGraphics;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace AutographBinding
{
	// @interface T1Signature : NSObject
	[BaseType (typeof(NSObject))]
	interface T1Signature
	{
		// @property (nonatomic, strong) NSData * imageData;
		[Export ("imageData", ArgumentSemantic.Strong)]
		NSData ImageData { get; set; }

		// @property (nonatomic, strong) UIImageView * imageView;
		[Export ("imageView", ArgumentSemantic.Strong)]
		UIImageView ImageView { get; set; }

		// @property (nonatomic, strong) NSData * pdfData;
		[Export ("pdfData", ArgumentSemantic.Strong)]
		NSData PdfData { get; set; }

		// @property (assign, nonatomic) CGPDFDocumentRef pdf;
		[Export ("pdf", ArgumentSemantic.Assign)]
		CGPDFDocument Pdf { get; set; }

		// @property (nonatomic, strong) NSString * svgString;
		[Export ("svgString", ArgumentSemantic.Strong)]
		string SvgString { get; set; }

		// @property (nonatomic, strong) NSString * xmlString;
		[Export ("xmlString", ArgumentSemantic.Strong)]
		string XmlString { get; set; }

		// @property (nonatomic, strong) NSString * hashString;
		[Export ("hashString", ArgumentSemantic.Strong)]
		string HashString { get; set; }

		// @property (assign) CGRect frame;
		[Export ("frame", ArgumentSemantic.Assign)]
		CGRect Frame { get; set; }

		// @property (assign) NSTimeInterval timestamp;
		[Export ("timestamp")]
		double Timestamp { get; set; }
	}

	// @interface T1SignaturePoint : NSObject <NSCopying>
	[BaseType (typeof(NSObject))]
	interface T1SignaturePoint : INSCopying
	{
		// @property (assign, nonatomic) CGPoint location;
		[Export ("location", ArgumentSemantic.Assign)]
		CGPoint Location { get; set; }

		// @property (assign, nonatomic) CGPoint velocity;
		[Export ("velocity", ArgumentSemantic.Assign)]
		CGPoint Velocity { get; set; }

		// @property (assign, nonatomic) CGPoint acceleration;
		[Export ("acceleration", ArgumentSemantic.Assign)]
		CGPoint Acceleration { get; set; }

		// @property (assign, nonatomic) NSTimeInterval timestamp;
		[Export ("timestamp")]
		double Timestamp { get; set; }

		// @property (assign, nonatomic) float azimuthAngle;
		[Export ("azimuthAngle")]
		float AzimuthAngle { get; set; }

		// @property (assign, nonatomic) float altitudeAngle;
		[Export ("altitudeAngle")]
		float AltitudeAngle { get; set; }

		// @property (assign, nonatomic) float pressure;
		[Export ("pressure")]
		float Pressure { get; set; }

		// @property (assign, nonatomic) float diameter;
		[Export ("diameter")]
		float Diameter { get; set; }

		// @property (assign, nonatomic) NSUInteger id;
		[Export ("id")]
		nuint Id { get; set; }
	}

	// @protocol T1AutographDelegate <NSObject>
	[Protocol, Model (AutoGeneratedName = true)]
	[BaseType (typeof(NSObject))]
	interface T1AutographDelegate
	{
		// @optional -(void)autographDidCancelModalView:(T1Autograph *)autograph;
		[Export ("autographDidCancelModalView:")]
		void AutographDidCancelModalView (T1Autograph autograph);

		// @optional -(void)autographDidCompleteWithNoSignature:(T1Autograph *)autograph;
		[Export ("autographDidCompleteWithNoSignature:")]
		void AutographDidCompleteWithNoSignature (T1Autograph autograph);

		// @optional -(void)autograph:(T1Autograph *)autograph willCompleteWithSignature:(T1Signature *)signature;
		[Export ("autograph:willCompleteWithSignature:")]
		void WillCompleteWithSignature (T1Autograph autograph, T1Signature signature);

		// @optional -(void)autograph:(T1Autograph *)autograph didCompleteWithSignature:(T1Signature *)signature;
		[Export ("autograph:didCompleteWithSignature:")]
		void DidCompleteWithSignature (T1Autograph autograph, T1Signature signature);

		// @optional -(void)autograph:(T1Autograph *)autograph didEndLineWithSignaturePointCount:(NSUInteger)count;
		[Export ("autograph:didEndLineWithSignaturePointCount:")]
		void DidEndLineWithSignaturePointCount (T1Autograph autograph, nuint count);
	}

	// @interface T1Autograph : NSObject
	[BaseType (typeof(NSObject))]
	interface T1Autograph
	{
		// @property (nonatomic, strong) NSString * licenseCode;
		[Export ("licenseCode", ArgumentSemantic.Strong)]
		string LicenseCode { get; set; }

		// @property (assign, nonatomic) BOOL showGuideline;
		[Export ("showGuideline")]
		bool ShowGuideline { get; set; }

		// @property (nonatomic, strong) UIColor * strokeColor;
		[Export ("strokeColor", ArgumentSemantic.Strong)]
		UIColor StrokeColor { get; set; }

		// @property (assign, nonatomic) float strokeWidth;
		[Export ("strokeWidth")]
		float StrokeWidth { get; set; }

		// @property (assign, nonatomic) float velocityReduction;
		[Export ("velocityReduction")]
		float VelocityReduction { get; set; }

		// @property (assign, nonatomic) BOOL swipeToUndoEnabled;
		[Export ("swipeToUndoEnabled")]
		bool SwipeToUndoEnabled { get; set; }

		// @property (assign, nonatomic) BOOL showDate;
		[Export ("showDate")]
		bool ShowDate { get; set; }

		// @property (assign, nonatomic) BOOL dateIncludesTime;
		[Export ("dateIncludesTime")]
		bool DateIncludesTime { get; set; }

		// @property (assign, nonatomic) BOOL showHash;
		[Export ("showHash")]
		bool ShowHash { get; set; }

		// @property (nonatomic, strong) NSString * customHash;
		[Export ("customHash", ArgumentSemantic.Strong)]
		string CustomHash { get; set; }

		// @property (assign, nonatomic) float exportScale;
		[Export ("exportScale")]
		float ExportScale { get; set; }

		// @property (assign, nonatomic) BOOL clipSignatureToBounds;
		[Export ("clipSignatureToBounds")]
		bool ClipSignatureToBounds { get; set; }

		// @property (assign, nonatomic) BOOL drawOnlyWithApplePencil;
		[Export ("drawOnlyWithApplePencil")]
		bool DrawOnlyWithApplePencil { get; set; }

		// @property (readonly, assign) NSUInteger buildNumber;
		[Export ("buildNumber")]
		nuint BuildNumber { get; }

		// +(id)autographWithDelegate:(UIViewController<T1AutographDelegate> *)delegate modalDisplayString:(NSString *)displayString;
		[Static]
		[Export ("autographWithDelegate:modalDisplayString:")]
		NSObject AutographWithDelegate (T1AutographDelegate @delegate, string displayString);

		// +(id)autographWithView:(id)theView delegate:(id<T1AutographDelegate>)delegate;
		[Static]
		[Export ("autographWithView:delegate:")]
		NSObject AutographWithView (NSObject theView, T1AutographDelegate @delegate);

		// -(void)reset:(id)sender __attribute__((ibaction));
		[Export ("reset:")]
		void Reset (NSObject sender);

		// -(void)done:(id)sender __attribute__((ibaction));
		[Export ("done:")]
		void Done (NSObject sender);
	}
}
